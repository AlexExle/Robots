#samewindow
//long max
#line 0 solid #911e42 
//long min
//#line 1 solid #0000ff
//short max
//#line 2 dashed #000000
//short min
//#line 3 dashed #ff0000

//шаг лесенки
extern step = 50;
extern offset = 0;
//размер доли
extern quantityOfShare = 22;
//макс колво долей
extern maxShares = 2;
//количество шагов цены на которое будет изменяться цена активации заявок на вход в позицию
extern priceStepCount = 5;
//extern maxRisk = 0.5;
extern avalibleMoney = 400000;
//
extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

var count = 0;

static startPoint = 0;

static lowPoint;

static highPoint;
//id текущего стопа
static curStopOrder;
//id позиции на шорт
static curShortOrder;
//id позиции на лонг
static curLongOrder;
// цена входа
static enterPrice;
// коэффициент выставления заявки
static quantityRate;
static position;
static fortsPositionSize = 0;

function init()
{
	position = 0;
	quantityRate = 1;
	if (offset >= step) {
		lackHistory();
	}
	requestFORTSPositions(clientId);
    //count = shortPer+1;
	//setInitCandles(shortPer);
	//setBounds(0, longPer, 0);
	//setBounds(1, longPer, 0);
	//setBounds(2, shortPer, 0);
	//setBounds(3, shortPer, 0);
}

function getSecBalanceWrapper()
{
	if (isForts == 0)
	{
		return getSecBalance();
	}
	else
	{
		return fortsPositionSize;
		// all difficult
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
		signal::output("secInf :" + secInf["secid"]);
		signal::output("getClient :" + clientId);
		signal::output("FORST position :" + fortsPos["totalnet"]);
		
		fortsPositionSize = fortsPos["totalnet"];
  }
}

function updateRate(var entPrice, var exitPrice, var posDirection)
{
	if (posDirection < 0)
	{
		if(entPrice > exitPrice)
		{
			quantityRate = quantityRate + 0.2;
		}
		else
		{
			quantityRate = 1;
		}
	}
	if (posDirection > 0)
	{
		if(entPrice < exitPrice)
		{
			quantityRate = quantityRate + 0.2;
		}
		else
		{
			quantityRate = 1;
		}
	}
	signal::output("Новый коэфф: " + quantityRate);
}
function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

//рассчет размера входа. можно добавить плавающий коэффициент (при успешных сделаках он 1, при убыточных увеличивается)
function calcQuantity(var price)
{
	var currentPos = getSecBalanceWrapper();
	
	// getSecBalance() > 0 && round(abs(getSecBalance())/quantityOfShare) == 1)
	return floor((avalibleMoney * quantityRate)/(getSecLotSize() * price));
}

//функция для установки ордера (кредит включен!)
function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	if (quantity == 0 || price == 0 || conditionPrice == 0)
	{
		return 0;
	}
	var order = new_object("hash");

	// Заполнение парамеров хеша
	order["operation"] = orderType;
	order["quantity"] = quantity;
	order["usecredit"] = true;
	order["price"] = price;
	order["validbefore"] = TILL_CANCELED;
	order["condition"] = condition;
	order["condvalue"] = conditionPrice;

	// Выставление заявку на биржу
	return trade_action::transactMultiple(order);
}

//функция для установки стоп ордера
function setStopOrder(var orderType, var price)
{
	var stop = new_object("hash");

	// Заявка на продажу
	stop["operation"] = orderType;

	// Часть Stop Loss
	stop["sl_activationprice"] = price;
	stop["sl_quantity"] = "100%" ;
	stop["validbefore"] = TILL_CANCELED;

	// Выставление заявки на рынок
	return trade_action::transactMultiple(stop);
}

function getMin(var period)
{	
	var i = period * -1;
	var result = low[i];
	while(i < 0)
	{
		if(result > low[i])
		{
			result = low[i];
		}
		i = i + 1;
	}
	return result;
}

function getMax(var period)
{
	var i = period * -1;
	var result = high[i];
	while(i < 0)
	{
		if(result < high[i])
		{
			result = high[i];
		}
		i= i + 1;
	}
	return result;
}

//обновляем ордера
function updateOrders()
{
	//старые в утиль
	trade_action::cancelAllOrders();
	
	var activationPrice = line[0] - step + (getSecPriceStep()* priceStepCount) ;
	curShortOrder = setOrder(OP_SELL, line[0] - step, calcQuantity( line[0] - step ), COND_ASK, activationPrice );
	if (not curShortOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
	   signal::output("Вошли в шорт: " + line[1] + " цена активации: " + activationPrice);
	}
	
	activationPrice =  line[0] + step - (getSecPriceStep()* priceStepCount);
	curLongOrder = setOrder(OP_BUY, line[0] + step , calcQuantity( line[0] + step ), COND_BID, activationPrice);
	if (not curLongOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
		signal::output("Вошли в лонг: " + line[0] + " цена активации: " + activationPrice );
	}
}

//обновляем стопы
function updateStopOrder()
{
	trade_action::cancelAllOrders();
	trade_action::cancelStopOrder(curStopOrder);
	//бумаг > 0? стоим в лонге, значит стоп-заявка на шорт
	if(getSecBalance()> 0)
	{
		curStopOrder = setStopOrder(OP_SELL, line[3]);
	}
	else
	{
		if (getSecBalance() < 0)
		{
			curStopOrder = setStopOrder(OP_BUY, line[2]);
		}
	}
	
	if (not curStopOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
		signal::output("Обновили стоп.");
	}
}


//по ордеру мы должны смотреть закрылся ли ордер, если да, то делаем то что нужно после полного входа
function onOrder(var id)
{
	var order = getOrder(id);
	//если полностью вошли в позицию - закрываем все заявки (точнее одну на противоположенной границе)
	if (order["status"] == OS_MATCHED)
	{
		var price =	order["price"];
		//вошли в шорт
		if (id == curShortOrder)
		{
			trade_action::cancelAllOrders();			
			signal::output("Зашли полностью в шорт. Цена :" + price);
			position = -1;
			enterPrice = price;
		}
		else		
			//зашли в лонг
			if (id == curLongOrder )
			{
				trade_action::cancelAllOrders();
				signal::output("Зашли полностью в лонг. Цена :" + price);
				position = 1;
				enterPrice = price;
			}
			else
				{				
					var stop = getStopOrder(curStopOrder);
					//вышли из позиции
					if (order["orderno"] == stop["orderno"] && getSecBalance() == 0)
					{
						price = stop["sl_activationprice"];
						signal::output("Вышли из позиции. Цена активации :" + price);
						updateOrders();
						updateRate(enterPrice, price, position);
						enterPrice = 0;
						position = 0;
					}
				}
	}
}

// по трейду изменяем кол-во бумаг, чтобы понимать в лонге мы или в шорте
function onTrade(var id) 
{
	var trade = getTrade(id);
	if (trade["operation"]  == OP_BUY)
	{	
		signal::output("Купили "+trade["quantity"]);
	}
	else
	{	
		signal::output("Продали "+trade["quantity"]);
	}
	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
	}
}

function calc()
{
	signal::output("time :" + getFormattedDateTime(getServerTime()) );
	signal::output("high Point:" + highPoint);
	signal::output("high Price:" + high);
	signal::output("low Point:" + lowPoint);
	signal::output("low Price:" + low);
	if (startPoint == 0)
	{
		startPoint = open;
		startPoint = startPoint - fmod(startPoint, step) + offset;
		line[0] = startPoint;
		lowPoint = startPoint - step;
		highPoint = startPoint + step;
	}
	else{
		if (high >= highPoint)
		{
		   line[0] = highPoint;
		   lowPoint =  highPoint - step;
		   highPoint = highPoint + step;		   
		}
		else
		{ if (low <= lowPoint) 
		  {
			 line[0] = lowPoint;
			 highPoint = lowPoint + step;		   
		     lowPoint = lowPoint - step;		     
		  }
		  else
		  {
			line[0] = line[0][-1];
		  }
		}
	}	
	
	// обновлять по предыдущему входу
    //if (getSecBalance() == 0)
    //вход в позицию одним контрактом по обе стороны
    //if (getSecBalance() > 0 && round(abs(getSecBalance())/quantityOfShare) == 1)
    // стоп и переворот в противоположенную сторону. определяем сторону по колву инструментов >0 или <0
    //if (getSecBalance() > 0 && round(abs(getSecBalance())/quantityOfShare) == 2)
    //стоп и переворот в противоположенную стороноу и тейк профит на одну долю в другую.
}

function updateState() 
{	
	//if(getSecBalanceWrapper() == 0)
	//{
		//updateOrdersupdateOrders();
	//}	
	//else
	//{	  
		//if (   //if (getSecBalance() > 0 && round(abs(getSecBalance())/quantityOfShare) == 1))
		//updateStopOrder();
	//}
	//signal::output("***************** LOG*****************");
	if (isForts > 0)
	{
		signal::output("Current FORTS position :" + getSecBalanceWrapper());
	}
		
	//signal::output("***************** END LOG*****************");
}


// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
     signal::outputMultiple("FORST position :" + getSecBalanceWrapper());
  }
}
