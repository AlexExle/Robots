#samewindow
//stairway
#line 0 solid #911e42 

//??? ???????
extern step = 50;
//????????? ????? 
extern offset = 0;
//?????? ????
extern quantityOfShare = 22;
//?????????? ????? ???? ?? ??????? ????? ?????????? ???? ????????? ?????? ?? ???? ? ???????
extern priceStepCount = 5;

extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

static currentPoint = 0;

static lowPoint;

static needUpdate = 0;

static highPoint;
//id ???????? ?????
static curStopOrder;
//id ??????? ?? ????
static curShortOrder;
//id ??????? ?? ????
static curLongOrder;
// ???? ?????
static enterPrice;
// ??????????? ??????????? ??????
static quantityRate;
static position;
static fortsPositionSize = 0;

function CancelAllOrderCustom()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				trade_action::cancelOrder(order);
			}
			i += 1;
		}
	}
}

function HasActiveWatchingOrders()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				return true;
			}
			i += 1;
		}
	}
	return false;
}

function init()
{
	setClient(clientId);
	position = 0;
	quantityRate = 1;
	if (offset >= step) {
		lackHistory();
	}
	requestFORTSPositions(clientId);
 
	currentPoint = open;
	currentPoint = currentPoint - fmod(currentPoint, step) + offset;
	line[0] = currentPoint;
	lowPoint = currentPoint - step;
	highPoint = currentPoint + step;
	needUpdate = 1;
}

function getSecBalanceWrapper()
{
	if (isForts == 0)
	{
		return getSecBalance();
	}
	else
	{
		return fortsPositionSize;
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
		signal::output("secInf :" + secInf["secid"]);
		signal::output("getClient :" + clientId);
		if (!fortsPos.haskey("totalnet") )
		{
			fortsPositionSize = 0;
		}
		else
		{
			fortsPositionSize = fortsPos["totalnet"];
		}
		signal::output("FORST position :" + fortsPositionSize);
  }
}

function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

function calculateSharesCount()
{
	var	result = round(
				 abs(
					getSecBalanceWrapper()
					)/getSecLotSize()
					/quantityOfShare
				);
		
	return result;
}

//??????? ??????? ?????
function calcQuantity(var shares)
{		
	return (quantityOfShare * shares);
}

//??????? ??? ????????? ?????? (?????? ???????!)
function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	if (quantity == 0 || price == 0 || conditionPrice == 0)
	{
		return 0;
	}
	var order = new_object("hash");

	// ?????????? ????????? ????
	order["operation"] = orderType;
	order["quantity"] = quantity;
	if (isForts > 0)
	{
		order["usecredit"] = false;
	}
	else
	{
		order["usecredit"] = true;
	}
	order["client"] = clientId;
	order["price"] = price;
	order["validbefore"] = TILL_CANCELED;
	order["condition"] = condition;
	order["condvalue"] = conditionPrice;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(order);
}

//??????? ??? ????????? ???? ??????
function setStopOrder(var orderType, var price)
{
	var stop = new_object("hash");

	// ?????? ?? ???????
	stop["operation"] = orderType;

	// ????? Stop Loss
	stop["sl_activationprice"] = price;
	stop["sl_quantity"] = "100%" ;
	stop["validbefore"] = TILL_CANCELED;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(stop);
}

function getMin(var period)
{	
	var i = period * -1;
	var result = low[i];
	while(i < 0)
	{
		if(result > low[i])
		{
			result = low[i];
		}
		i = i + 1;
	}
	return result;
}

function getMax(var period)
{
	var i = period * -1;
	var result = high[i];
	while(i < 0)
	{
		if(result < high[i])
		{
			result = high[i];
		}
		i= i + 1;
	}
	return result;
}

//????????? ??????
function updateOrders(var currentShare)
{
	//?????? ? ?????	
	 signal::output("Trying to cancel all old orders...");
	if (isForts >0)
	{
		CancelAllOrderCustom();
	}
	else
	{
		trade_action::cancelBuyOrders();
		trade_action::cancelSellOrders();
		trade_action::cancelAllOrders();
	}
	
	var activationPrice = 0;
	var enterPrice = 0;
	//?????? ?? ??? ???????
	if (currentShare == 0)
	{	
		
		activationPrice = line[0] - step ;
		enterPrice = line[0] - step - (getSecPriceStep()* priceStepCount);
		curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(1), COND_ASK, activationPrice );
		if (not curShortOrder) 
		{
			  signal::output(getLastErrorMessage());
		}
		else
		{
		   signal::output("Created new order , price: " + enterPrice + "| Activation price: " + activationPrice);
		}
		
		activationPrice = line[0] + step ;
		enterPrice = line[0] + step + (getSecPriceStep()* priceStepCount);
		curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(1), COND_BID, activationPrice);
		if (not curLongOrder) 
		{
		  signal::output(getLastErrorMessage());
		}
		else
		{
			signal::output("Created new order , price: " + enterPrice + "| Activation price: " + activationPrice );
		}
	}
	if (currentShare == 1)
	{	
		//? ?????
		if (getSecBalanceWrapper() > 0)
		{
			activationPrice = line[0] - step ;
			enterPrice = line[0] - step - (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(3), COND_ASK, activationPrice );
			if (not curShortOrder) 
			{
				  signal::output(getLastErrorMessage());
			}
			else
			{
			   signal::output("Created new order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
		}
		else // ? ?????
		{			
			activationPrice = line[0] + step ;
			enterPrice = line[0] + step + (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(3), COND_BID, activationPrice);
			if (not curLongOrder) 
			{
			  signal::output(getLastErrorMessage());
			}
			else
			{
				signal::output("Created new order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice );
			}
		}
	}
	if (currentShare == 2)
	{
		//? ?????
		if (getSecBalanceWrapper() > 0)
		{
			activationPrice = line[0] - step ;
			enterPrice =  line[0] - step -  (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(3), COND_ASK, activationPrice );
			if (not curShortOrder) 
			{
				  signal::output(getLastErrorMessage());
			}
			else
			{
			   signal::output("Created new order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
			
			activationPrice = line[0] + step;
			enterPrice  = line[0] + step + (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_SELL, enterPrice, calcQuantity(1), COND_BID, activationPrice);
			if (not curLongOrder) 
			{
			  signal::output(getLastErrorMessage());
			}
			else
			{
				signal::output("Created new order for take profit of one share, price: " + enterPrice + "| Activation price: " + activationPrice );
			}		
		}
		else // ? ?????
		{
		
			activationPrice = line[0] - step ;
			enterPrice = line[0] - step - (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_BUY, enterPrice, calcQuantity(1), COND_ASK, activationPrice );
			if (not curShortOrder) 
			{
				  signal::output(getLastErrorMessage());
			}
			else
			{
			   signal::output("Created new order for take profit of one share, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
			
			activationPrice = line[0] + step;
			enterPrice = line[0] + step + (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(3), COND_BID, activationPrice);
			if (not curLongOrder) 
			{
			  signal::output(getLastErrorMessage());
			}
			else
			{
				signal::output("Created new order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice );
			}
		}
	}
	
}

//????????? ?????
function updateStopOrder()
{
	trade_action::cancelAllOrders();
	trade_action::cancelStopOrder(curStopOrder);
	//????? > 0? ????? ? ?????, ?????? ????-?????? ?? ????
	if(getSecBalance()> 0)
	{
		curStopOrder = setStopOrder(OP_SELL, line[3]);
	}
	else
	{
		if (getSecBalance() < 0)
		{
			curStopOrder = setStopOrder(OP_BUY, line[2]);
		}
	}
	
	if (not curStopOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
		signal::output("???????? ????.");
	}
}


//?? ?????? ?? ?????? ???????? ???????? ?? ?????, ???? ??, ?? ?????? ?? ??? ????? ????? ??????? ?????
function onOrder(var id)
{
	var order = getOrder(id);
	
	if (order["status"] == OS_MATCHED)
	{
	
		if (isForts >0)
		{
			CancelAllOrderCustom();
		}
		else
		{
			trade_action::cancelBuyOrders();
			trade_action::cancelSellOrders();
			trade_action::cancelAllOrders();
		}
		
		var newShares = calculateSharesCount();
		signal::output("New position created! New count of shares :" + newShares);
		//updateOrders(newShares);		
	}
}

function onTrade(var id) 
{
	var trade = getTrade(id);

	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
	}
}

function calc()
{	
	if(line[0] == 0)
	{
		line[0] = currentPoint;
	}
	if (high >= highPoint)
	{
	   line[0] = highPoint;
	   currentPoint = highPoint;
	   lowPoint =  highPoint - step;
	   highPoint = highPoint + step;		
	   needUpdate = 1;		     		
	}
	else
	{ if (low <= lowPoint) 
	  {
		 line[0] = lowPoint;
		 currentPoint = lowPoint;
		 highPoint = lowPoint + step;		   
		 lowPoint = lowPoint - step;
		 needUpdate = 1;		     		
	  }
	}
}


function onNewCandle() 
{	
	var orders = getActiveOrderIDs();
	if(orders.size() == 0 &&  needUpdate == 1)
	{		
		updateOrders(calculateSharesCount());
		needUpdate = 0;
	}				
	if (isForts > 0)
	{
		signal::output("Current position :" + getSecBalanceWrapper());
		signal::output("Current shares :" + calculateSharesCount());
	}
}

// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
     signal::outputMultiple("Current Position :" + getSecBalanceWrapper());
  }
  if (key == chr2num("2") and isKeyPressed(KEY_LSHIFT)) 
  {
	var newShares = calculateSharesCount();
	signal::output("Updating orders. Count of current shares :" + newShares);
	updateOrders(newShares);		
  }
  if (key == chr2num("3") and isKeyPressed(KEY_LSHIFT)) 
  {
  signal::output("Try to delete orders");
	trade_action::cancelBuyOrders();
	trade_action::cancelSellOrders();
	trade_action::cancelAllOrders();	
  }
  if (key == chr2num("4") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::output("Try to custom delete orders");
	CancelAllOrderCustom();
  }
  
}
