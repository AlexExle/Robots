#samewindow
//stairway
#line 0 solid #911e42 


extern step = 50;

extern offset = 0;

extern quantityOfShare = 22;

extern priceStepCount = 5;

extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

static currentPoint = 0;

static lowPoint;

static needUpdate = 0;

static highPoint;

static curStopOrder;

static curShortOrder;

static curLongOrder;

static enterPrice;

static quantityRate;
static position;
static fortsPositionSize = 0;
 
static secName = "";
static file;

static waitWhileActiveOrder = 0;
 
function writeToLogFile(var message)
{
	file.writeLn(message);
}

function GetSecName()
{
	var secInf = getSecInfo();
	return secInf["secname"];
}

function GenerateTimeStamp()
{
	return getFormattedDateTime(getServerTime());
}

function WriteLogMessage(var message)
{	
	var logMsg = GenerateTimeStamp() + " - " + secName + " : " + message;
	signal::outputMultiple(logMsg);
	writeToLogFile(logMsg);
}

function WriteToFile(var message)
{
	var logMsg = GenerateTimeStamp() + " - " + secName + " : " + message;	
	writeToLogFile(logMsg);
}

function CancelAllOrderCustom()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				trade_action::cancelOrder(order);
			}
			i += 1;
		}
	}
}

function HasActiveWatchingOrders()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				return true;
			}
			i += 1;
		}
	}
	return false;
}

function init()
{	
	file = new_object("file");
	file.waopen("atf_robot_log.txt");
	secName = GetSecName();
	setClient(clientId);
	position = 0;
	quantityRate = 1;
	if (offset >= step) {
		lackHistory();
	}
	requestFORTSPositions(clientId);

	currentPoint = open;
	currentPoint = currentPoint - fmod(currentPoint, step) + offset;
	line[0] = currentPoint;
	lowPoint = currentPoint - step;
	highPoint = currentPoint + step;
}

function onStartRobot()
{
	requestFORTSPositions(clientId);
}

function getSecBalanceWrapper()
{
	if (isForts == 0)
	{
		return getSecBalance();
	}
	else
	{
		return fortsPositionSize;
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
        WriteLogMessage("secInf :" + secInf["secid"]);
        WriteLogMessage("getClient :" + clientId);
		if (!fortsPos.haskey("totalnet") )
		{
			fortsPositionSize = 0;
		}
		else
		{
			fortsPositionSize = fortsPos["totalnet"];
		}
        WriteLogMessage("FORST position :" + fortsPositionSize);
		var frotsMoney = getFORTSMoney(clientId);
		WriteToFile("Client: " + clientId + ": MCurrent " + frotsMoney["mcurrent"]);
  }
}

function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

function calculateSharesCount()
{
	var	result = round(
				 abs(
					getSecBalanceWrapper()
					)/getSecLotSize()
					/quantityOfShare
				);
		
	return result;
}

function calcQuantity(var shares)
{		
	return (quantityOfShare * shares);
}

function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	if (quantity == 0 || price == 0)
	{
		return 0;
	}
	var order = new_object("hash");

	order["operation"] = orderType;
	order["quantity"] = quantity;
	if (isForts > 0)
	{
		order["usecredit"] = false;
	}
	else
	{
		order["usecredit"] = true;
	}
	order["client"] = clientId;
	order["price"] = price;
	order["validbefore"] = TILL_CANCELED;
	if (condition != 0 && conditionPrice != 0)
	{
	    order["condition"] = condition;
	    order["condvalue"] = conditionPrice;
	}

	return trade_action::transactMultiple(order);
}

function setStopOrder(var orderType, var price)
{
	var stop = new_object("hash");

	stop["operation"] = orderType;

	// ????? Stop Loss
	stop["sl_activationprice"] = price;
	stop["sl_quantity"] = "100%" ;
	stop["validbefore"] = TILL_CANCELED;

	return trade_action::transactMultiple(stop);
}

function updateOrders(var currentShare, var price)
{

    WriteLogMessage("Trying to cancel all old orders...");
	if (isForts >0)
	{
		CancelAllOrderCustom();
	}
	else
	{
		trade_action::cancelBuyOrders();
		trade_action::cancelSellOrders();
		trade_action::cancelAllOrders();
	}
	
	var activationPrice = 0;
	var enterPrice = 0;

	if (currentShare == 0)
	{	
		
		activationPrice = price - step ;
		enterPrice = price - step - (getSecPriceStep()* priceStepCount);
		curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(1), COND_ASK_OR_LAST, activationPrice );
		if (not curShortOrder) 
		{
            WriteLogMessage(getLastErrorMessage());
		}
		else
		{
            WriteLogMessage("Created new SELL order , price: " + enterPrice + "| Activation price: " + activationPrice );
		}
		
		activationPrice = price + step ;
		enterPrice = price + step + (getSecPriceStep()* priceStepCount);
		curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(1), COND_BID_OR_LAST, activationPrice);
		if (not curLongOrder) 
		{
            WriteLogMessage(getLastErrorMessage());
		}
		else
		{
            WriteLogMessage("Created new BUY order , price: " + enterPrice + "| Activation price: " + activationPrice );
		}
	}
	if (currentShare == 1)
	{
		if (getSecBalanceWrapper() > 0)
		{
			activationPrice = price - step ;
			enterPrice = price - step - (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(3), COND_ASK_OR_LAST, activationPrice );
			if (not curShortOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new SELL order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
		}
		else
		{			
			activationPrice = price + step ;
			enterPrice = price + step + (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(3), COND_BID_OR_LAST, activationPrice);
			if (not curLongOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new BUY order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice );
			}
		}
	}
	if (currentShare == 2)
	{
		if (getSecBalanceWrapper() > 0)
		{
			activationPrice = price - step ;
			enterPrice = price - step -  (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_SELL, enterPrice, calcQuantity(3), COND_ASK_OR_LAST, activationPrice );
			if (not curShortOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new SELL order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
			
			activationPrice = price + step;
			enterPrice  = price + step - (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_SELL, enterPrice, calcQuantity(1), COND_BID_OR_LAST, activationPrice);
			if (not curLongOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new SELL order for take profit of one share, price: " + enterPrice + "| Activation price: " + activationPrice );
			}		
		}
		else
		{
		
			activationPrice = price - step ;
			enterPrice = price - step + (getSecPriceStep()* priceStepCount);
			curShortOrder = setOrder(OP_BUY, enterPrice, calcQuantity(1), COND_ASK_OR_LAST, activationPrice );
			if (not curShortOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new BUY order for take profit of one share, price: " + enterPrice + "| Activation price: " + activationPrice);
			}
			
			activationPrice = price + step;
			enterPrice = price + step + (getSecPriceStep()* priceStepCount);
			curLongOrder = setOrder(OP_BUY, enterPrice, calcQuantity(3), COND_BID_OR_LAST, activationPrice);
			if (not curLongOrder) 
			{
                WriteLogMessage(getLastErrorMessage());
			}
			else
			{
                WriteLogMessage("Created new BUY order for overturn, price: " + enterPrice + "| Activation price: " + activationPrice );
			}
		}
	}
	
}

function updateStopOrder()
{
	trade_action::cancelAllOrders();
	trade_action::cancelStopOrder(curStopOrder);

	if(getSecBalance()> 0)
	{
		curStopOrder = setStopOrder(OP_SELL, line[3]);
	}
	else
	{
		if (getSecBalance() < 0)
		{
			curStopOrder = setStopOrder(OP_BUY, line[2]);
		}
	}
	
	if (not curStopOrder) 
	{
        WriteLogMessage(getLastErrorMessage());
	}
	else
	{
        WriteLogMessage("Stop Order entered");
	}
}

function onOrder(var id)
{
	if (getHour(getServerTime()) == 9 && getMinute(getServerTime()) < 58)
	{
		return;
	}
	var order = getOrder(id);
	if (order["status"] == OS_ACTIVE)
	{
		waitWhileActiveOrder = 1;
	}
	if (order["status"] == OS_MATCHED)
	{		
		var newShares = calculateSharesCount();
        WriteLogMessage("New position created! New count of shares :" + newShares);
        WriteLogMessage("Updating orders for new level :" + order["condvalue"]);
		updateOrders(newShares, as_number(order["condvalue"]));
		//updateOrders(newShares);		
		waitWhileActiveOrder = 0;
	}
}

function onTrade(var id) 
{
	var trade = getTrade(id);

	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
		WriteLogMessage("Curent position changed:" + fortsPositionSize);
	}
}

function calc()
{	
	var lowCondition ;
	var highCondition;
	if(isHistoryCalculated())
	{
		lowCondition = close;
		highCondition = close;
	}
	else
	{
		lowCondition = low;
		highCondition = high;
	}
	if(line[0] == 0)
	{
		line[0] = currentPoint;
	}
	if (highCondition >= highPoint)
	{
	   line[0] = highPoint;
	   currentPoint = highPoint;
	   lowPoint =  highPoint - step;
	   highPoint = highPoint + step;	
	   if (getSecBalanceWrapper() > 0 && calculateSharesCount() == 1 && waitWhileActiveOrder == 0)
	   {
			updateOrders(calculateSharesCount(), currentPoint);  	     		
	   }
	}
	else
	{ if (lowCondition <= lowPoint) 
	  {
		 line[0] = lowPoint;
		 currentPoint = lowPoint;
		 highPoint = lowPoint + step;		   
		 lowPoint = lowPoint - step;
		 if (getSecBalanceWrapper() < 0 && calculateSharesCount() == 1 && waitWhileActiveOrder == 0)
		 {
			updateOrders(calculateSharesCount(), currentPoint);
		 }	     		
	  }
	}
}

// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
      WriteLogMessage("Current Position :" + getSecBalanceWrapper());
  }
  if (key == chr2num("2") and isKeyPressed(KEY_LSHIFT)) 
  {
	var newShares = calculateSharesCount();
      WriteLogMessage("Updating orders. Count of current shares :" + newShares);
	updateOrders(newShares, line[0]);		
  }
  if (key == chr2num("3") and isKeyPressed(KEY_LSHIFT))
  {
      WriteLogMessage("Try to delete orders");
	  trade_action::cancelBuyOrders();
	  trade_action::cancelSellOrders();
	  trade_action::cancelAllOrders();
  }
  if (key == chr2num("4") and isKeyPressed(KEY_LSHIFT)) 
  {
      WriteLogMessage("Try to custom delete orders");
	  CancelAllOrderCustom();
  }
  
}
