#samewindow
//stairway
#line 0 solid #911e42 

extern stopLoss = 100;

extern takeProfit = 600;

extern percentOfQuantuty = 40;

extern priceStepCount = 5;

extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

extern goPrice = 1200;

extern emaPeriod = 300;

extern minutes = 0;

static needUpdate = 0;

static quantityRate;
static position;
static fortsPositionSize = 0;
static freeMoney = 0;

static positionOrder = 0;
static takeProfitOrder = 0;
static stopLossOrder = 0;

function CancelAllOrderCustom()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				trade_action::cancelOrder(order);
			}
			i += 1;
		}
	}	
}

function CancelAllStopOrdersCustom()
{
	var secInf = getSecInfo();	
	var allOrders = getAllStopOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getStopOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == SS_WATCHING))
			{			
				trade_action::cancelStopOrder(order["secid"]);
			}
			i += 1;
		}
	}	
	
}

function init()
{
	setClient(clientId);
	position = 0;
	quantityRate = 1;

	requestFORTSPositions(clientId);
	line[0] = MovAvg(ind_ema, emaPeriod, pt_close);

}

function onStartRobot()
{
	requestFORTSPositions(clientId);
}

function calc()
{
	line[0] = MovAvg(ind_ema, emaPeriod, pt_close);
}

function getSecBalanceWrapper()
{
	var result;
	if (isForts == 0)
	{
		result = getSecBalance();
	}
	else
	{
		result = fortsPositionSize;
	}
	
	return as_number(result);
	
}

function getFreeMoney()
{
	if(isForts == 0)
	{
		return getMoneyBalance();
	}
	else
	{
		return freeMoney;
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
		
		
		if (!fortsPos.haskey("totalnet") )
		{
			fortsPositionSize = 0;
		}
		else
		{
			fortsPositionSize = fortsPos["totalnet"];
		}
		
		signal::outputMultiple("new Forst Position :" + fortsPositionSize);

		
		var frotsMoney = getFORTSMoney(clientId);
		freeMoney  = frotsMoney["mcurrent"];
  }
}

function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

//??????? ??????? ?????
function calcQuantity(var price)
{
	signal::output("Calculated quantity for order: " + floor((freeMoney * (percentOfQuantuty/100))/(getSecLotSize() * (goPrice))));
	return floor((freeMoney * (percentOfQuantuty/100))/(getSecLotSize() * (goPrice)));
}

//??????? ??? ????????? ?????? (?????? ???????!)
function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	var order = new_object("hash");

	// ?????????? ????????? ????
	order["operation"] = orderType;
	order["quantity"] = quantity;
	if (isForts > 0)
	{
		order["usecredit"] = false;
	}
	else
	{
		order["usecredit"] = true;
	}
	order["client"] = clientId;
	if (price != 0)
	{
		order["price"] = price;
	}
	order["validbefore"] = TILL_CANCELED;
	if (conditionPrice != 0)
	{
		order["condition"] = condition;
		order["condvalue"] = conditionPrice;
	}

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(order);
}

//??????? ??? ????????? ???? ??????
function setStopOrder(var orderType, var stopPrice, var takeProfitPrice, var quantity)
{
    if (quantity == 0 || (stopPrice == 0 && takeProfitPrice == 0))
	{
		return 0;
	}
	var stop = new_object("hash");

	// common Settings
	stop["operation"] = orderType;
	stop["validbefore"] = TILL_CANCELED;
	stop["client"] = clientId;

	//  Stop Loss
	stop["sl_activationprice"] = stopPrice ;
	stop["sl_quantity"] = quantity;
	
	// take profig
	
	stop["tp_activationprice"] = takeProfitPrice;
	stop["tp_quantity"] = quantity;	

	return trade_action::transactMultiple(stop);
}

//????????? ??????
function updateOrders(var operation, var price)
{

	if (isForts >0)
	{
		CancelAllOrderCustom();
	}
	else
	{
		trade_action::cancelBuyOrders();
		trade_action::cancelSellOrders();
		trade_action::cancelAllOrders();
	}
	CancelAllStopOrdersCustom();
	var quantity = calcQuantity(price);
	positionOrder =  setOrder(operation, 0, quantity + abs(getSecBalanceWrapper()), 0, 0 );
	if (operation == OP_SELL)
	{
		stopLossOrder = setOrder(OP_BUY, 0, quantity, COND_BID_OR_LAST, price + stopLoss);
		takeProfitOrder = setOrder(OP_BUY, 0, quantity, COND_ASK_OR_LAST,  price - takeProfit);
		
        //setStopOrder(OP_BUY, price + stopLoss, price - takeProfit, quantity);
	}
	else
	{
		takeProfitOrder = setOrder(OP_SELL, 0, quantity, COND_BID_OR_LAST,  price + takeProfit );
		stopLossOrder = setOrder(OP_SELL, 0, quantity, COND_ASK_OR_LAST, price - stopLoss );			
			
        //setStopOrder(OP_SELL, price - stopLoss, price + takeProfit, quantity);
	}
	if (not positionOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
	
	   signal::output("Update position. Price : " + price);
	}
}

function onOrder(var id)
{
	var order = getOrder(id);
	
	if (order["status"] == OS_MATCHED)
	{
		requestFORTSPositions(clientId);	
		if (order.haskey("condvalue") && as_number(order["condvalue"]) > 0)		
		{
			signal::output("Cancel other orders");
			if (isForts >0)
			{
				CancelAllOrderCustom();
			}
			else
			{
				trade_action::cancelBuyOrders();
				trade_action::cancelSellOrders();
				trade_action::cancelAllOrders();
			}
		}
	}
}

function onTrade(var id) 
{
	var trade = getTrade(id);

	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
		signal::outputMultiple("new Forst Position :" + fortsPositionSize);
	}
}

function onNewCandle() 
{		
	var orders = getActiveOrderIDs();
	
	signal::output("getHour(getCandleTime()) :" + getHour(getCandleTime()));
	signal::output("getMinute(getCandleTime())  :" + getMinute(getCandleTime()));
	signal::output("orders.size() :" + orders.size());
	signal::output("open :" + open);
	signal::output("line[0][-1] :" + line[0][-1]);
	signal::output("getSecBalanceWrapper()  :" + getSecBalanceWrapper() );
	
	//if 12 00 we need to sell
	if(getHour(getCandleTime()) == 12 && getMinute(getCandleTime()) == minutes && open < line[0][-1] && getSecBalanceWrapper() >= 0)
	{
		updateOrders(OP_SELL, open);
	}
	//if 13 00 we need to buy
	if(getHour(getCandleTime()) == 13 && getMinute(getCandleTime()) == minutes && open > line[0][-1] && getSecBalanceWrapper() <= 0)
	{
		updateOrders(OP_BUY, open);
	}		
}

// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
// test current position function
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
     signal::outputMultiple("Current Position :" + getSecBalanceWrapper());
  }
//test cancel all orders
  if (key == chr2num("2") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::output("Try to custom delete orders");
	CancelAllOrderCustom();
  }
  // test time determination
  if (key == chr2num("3") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::outputMultiple(getHour(getCandleTime()));
	signal::outputMultiple(getMinute(getCandleTime()));
  }
  // test of creating order for sale with stop/take profit
  if (key == chr2num("4") and isKeyPressed(KEY_LSHIFT)) 
  {
	 updateOrders(OP_SELL, open);
  }
  // test of creating order for buy with stop/take profit
  if (key == chr2num("5") and isKeyPressed(KEY_LSHIFT)) 
  {
	  updateOrders(OP_BUY, open);
  }
  //complex test without time compare
  if (key == chr2num("6") and isKeyPressed(KEY_LSHIFT)) 
  {
	var orders = getActiveOrderIDs();
	signal::output("getHour(getCandleTime()) :" + getHour(getCandleTime()));
	signal::output("getMinute(getCandleTime())  :" + getMinute(getCandleTime()));
	signal::output("orders.size() :" + orders.size());
	signal::output("open :" + open);
	signal::output("line[0][-1] :" + line[0][-1]);
	signal::output("getSecBalanceWrapper()  :" + getSecBalanceWrapper() );
	
	if( open < line[0][-1] && getSecBalanceWrapper() >=  0)
	{
	  	updateOrders(OP_SELL, open);
	}	
  }
  if (key == chr2num("7") and isKeyPressed(KEY_LSHIFT)) 
  {
	var orders = getActiveOrderIDs();
	signal::output("getHour(getCandleTime()) :" + getHour(getCandleTime()));
	signal::output("getMinute(getCandleTime())  :" + getMinute(getCandleTime()));
	signal::output("orders.size() :" + orders.size());
	signal::output("open :" + open);
	signal::output("line[0][-1] :" + line[0][-1]);
	signal::output("getSecBalanceWrapper()  :" + getSecBalanceWrapper() );
	
	if( open > line[0][-1] && getSecBalanceWrapper() <= 0)
	{
		updateOrders(OP_BUY, open);
	}		
  }
}