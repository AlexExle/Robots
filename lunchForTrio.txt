#samewindow
//stairway
#line 0 solid #911e42 

extern stopLoss = 100;

extern takeProfit = 600;

extern percentOfQuantuty = 40;

extern priceStepCount = 5;

extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

static needUpdate = 0;

// ???? ?????
static enterPrice;
// ??????????? ??????????? ??????
static quantityRate;
static position;
static fortsPositionSize = 0;
static freeMoney = 0;
static kgo = 0;

function CancelAllOrderCustom()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				trade_action::cancelOrder(order);
			}
			i += 1;
		}
	}
	
	
}

function init()
{
	setClient(clientId);
	position = 0;
	quantityRate = 1;

	requestFORTSPositions(clientId);
	 line[0] = MovAvg(ind_ema, 300, pt_close);

}

function calc()
{
	line[0] = MovAvg(ind_ema, 300, pt_close);
}


function getSecBalanceWrapper()
{
	if (isForts == 0)
	{
		return getSecBalance();
	}
	else
	{
		return fortsPositionSize;
	}
}

function getFreeMoney()
{
	if(isForts == 0)
	{
		return getMoneyBalance();
	}
	else
	{
		return freeMoney;
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
		signal::output("secInf :" + secInf["secid"]);
		signal::output("getClient :" + clientId);
		signal::output("FORST position :" + fortsPos["totalnet"]);
		fortsPositionSize = fortsPos["totalnet"];
		kgo = fortsPos["kgo"];
		
		var frotsMoney = getFORTSMoney(clientId);
		freeMoney  = fortsPos["mfree"];
  }
}

function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

//??????? ??????? ?????
function calcQuantity(var price)
{
	return floor((freeMoney * (percentOfQuantuty/100))/(getSecLotSize() * price));
}

//??????? ??? ????????? ?????? (?????? ???????!)
function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	if (quantity == 0 || price == 0 || conditionPrice == 0)
	{
		return 0;
	}
	var order = new_object("hash");

	// ?????????? ????????? ????
	order["operation"] = orderType;
	order["quantity"] = quantity;
	if (isForts > 0)
	{
		order["usecredit"] = false;
	}
	else
	{
		order["usecredit"] = true;
	}
	order["client"] = clientId;
	order["price"] = price;
	order["validbefore"] = TILL_CANCELED;
	order["condition"] = condition;
	order["condvalue"] = conditionPrice;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(order);
}

//??????? ??? ????????? ???? ??????
function setStopOrder(var orderType, var price)
{
	var stop = new_object("hash");

	// ?????? ?? ???????
	stop["operation"] = orderType;

	// ????? Stop Loss
	stop["sl_activationprice"] = price;
	stop["sl_quantity"] = "100%" ;
	stop["validbefore"] = TILL_CANCELED;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(stop);
}

function getMin(var period)
{	
	var i = period * -1;
	var result = low[i];
	while(i < 0)
	{
		if(result > low[i])
		{
			result = low[i];
		}
		i = i + 1;
	}
	return result;
}

function getMax(var period)
{
	var i = period * -1;
	var result = high[i];
	while(i < 0)
	{
		if(result < high[i])
		{
			result = high[i];
		}
		i= i + 1;
	}
	return result;
}

//????????? ??????
function updateOrders()
{
	//?????? ? ?????	
	 signal::output("Trying to cancel all old orders...");
	if (isForts >0)
	{
		CancelAllOrderCustom();
	}
	else
	{
		trade_action::cancelBuyOrders();
		trade_action::cancelSellOrders();
		trade_action::cancelAllOrders();
	}
	
	var activationPrice = 0;
	var enterPrice = 0;
	//?????? ?? ??? ???????
	
}


//?? ?????? ?? ?????? ???????? ???????? ?? ?????, ???? ??, ?? ?????? ?? ??? ????? ????? ??????? ?????
function onOrder(var id)
{
	var order = getOrder(id);
	
	if (order["status"] == OS_MATCHED)
	{
		var price =	order["price"];
	
	}
}

function onTrade(var id) 
{
	var trade = getTrade(id);

	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
	}
}

function onNewCandle() 
{	
	var orders = getActiveOrderIDs();
	if(orders.size() == 0 && needUpdate == 1)
	{		
		updateOrders();
		needUpdate = 0;
	}				
	if (isForts > 0)
	{
		signal::output("Current position :" + getSecBalanceWrapper());

	}
}#samewindow
//stairway
#line 0 solid #911e42 

extern stopLoss = 100;

extern takeProfit = 600;

extern percentOfQuantuty = 40;

extern priceStepCount = 5;

extern lotSize = 0;

extern isForts = 1;

extern "string" clientId = "client";

static needUpdate = 0;

// ???? ?????
static enterPrice;
// ??????????? ??????????? ??????
static quantityRate;
static position;
static fortsPositionSize = 0;
static freeMoney = 0;
static kgo = 0;

function CancelAllOrderCustom()
{
	var secInf = getSecInfo();
	var allOrders = getAllOrderIDs();
	var i = 0;
	if (allOrders.size() != 0)
	{
		while (i < allOrders.size()) {
			var orderId = allOrders[i];
			var order = getOrder(orderId);		
			if (order["secid"] == secInf["secid"] && (order["status"] == OS_WATCHING || order["status"] == OS_ACTIVE))
			{			
				trade_action::cancelOrder(order);
			}
			i += 1;
		}
	}
	
	
}

function init()
{
	setClient(clientId);
	position = 0;
	quantityRate = 1;

	requestFORTSPositions(clientId);
	 line[0] = MovAvg(ind_ema, 300, pt_close);

}

function calc()
{
	line[0] = MovAvg(ind_ema, 300, pt_close);
}


function getSecBalanceWrapper()
{
	if (isForts == 0)
	{
		return getSecBalance();
	}
	else
	{
		return fortsPositionSize;
	}
}

function getFreeMoney()
{
	if(isForts == 0)
	{
		return getMoneyBalance();
	}
	else
	{
		return freeMoney;
	}
}

function onEnvEvent(var event)
{
  if (event == "CLIENT_HOLDINGS") {
		var secInf = getSecInfo();
		var fortsPos = getFORTSPosition(clientId, secInf["secid"]);    
		signal::output("secInf :" + secInf["secid"]);
		signal::output("getClient :" + clientId);
		signal::output("FORST position :" + fortsPos["totalnet"]);
		fortsPositionSize = fortsPos["totalnet"];
		kgo = fortsPos["kgo"];
		
		var frotsMoney = getFORTSMoney(clientId);
		freeMoney  = fortsPos["mfree"];
  }
}

function getSecPriceStep()
{
	var secInfo = getSecInfo();
	return as_number(secInfo["minstep"]);
}

function getSecLotSize()
{
	if (lotSize == 0) {
		var secInfo = getSecInfo();
		return as_number(secInfo["lotsize"]);
	}
	else {
		return lotSize;
	}
}

//??????? ??????? ?????
function calcQuantity(var price)
{
	return floor((freeMoney * (percentOfQuantuty/100))/(getSecLotSize() * price));
}

//??????? ??? ????????? ?????? (?????? ???????!)
function setOrder(var orderType, var price, var quantity, var condition, var conditionPrice)
{
	if (quantity == 0 || price == 0 || conditionPrice == 0)
	{
		return 0;
	}
	var order = new_object("hash");

	// ?????????? ????????? ????
	order["operation"] = orderType;
	order["quantity"] = quantity;
	if (isForts > 0)
	{
		order["usecredit"] = false;
	}
	else
	{
		order["usecredit"] = true;
	}
	order["client"] = clientId;
	order["price"] = price;
	order["validbefore"] = TILL_CANCELED;
	order["condition"] = condition;
	order["condvalue"] = conditionPrice;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(order);
}

//??????? ??? ????????? ???? ??????
function setStopOrder(var orderType, var price)
{
	var stop = new_object("hash");

	// ?????? ?? ???????
	stop["operation"] = orderType;

	// ????? Stop Loss
	stop["sl_activationprice"] = price;
	stop["sl_quantity"] = "100%" ;
	stop["validbefore"] = TILL_CANCELED;

	// ??????????? ?????? ?? ?????
	return trade_action::transactMultiple(stop);
}

function getMin(var period)
{	
	var i = period * -1;
	var result = low[i];
	while(i < 0)
	{
		if(result > low[i])
		{
			result = low[i];
		}
		i = i + 1;
	}
	return result;
}

function getMax(var period)
{
	var i = period * -1;
	var result = high[i];
	while(i < 0)
	{
		if(result < high[i])
		{
			result = high[i];
		}
		i= i + 1;
	}
	return result;
}

//????????? ??????
function updateOrders(var operation)
{
	//?????? ? ?????
	curShortOrder = setOrder(OP_SELL, , calcQuantity(line[1]), COND_ASK, activationPrice );
	if (not curShortOrder) 
	{
		  signal::output(getLastErrorMessage());
	}
	else
	{
	   signal::output("Обновили шорт. Цена: " + line[1] + " Цена Активации: " + activationPrice);
	}
	signal::output("Trying to cancel all old orders...");
	if (isForts >0)
	{
		CancelAllOrderCustom();
	}
	else
	{
		trade_action::cancelBuyOrders();
		trade_action::cancelSellOrders();
		trade_action::cancelAllOrders();
	}
	
	var activationPrice = 0;
	var enterPrice = 0;
	//?????? ?? ??? ???????
	
}


//?? ?????? ?? ?????? ???????? ???????? ?? ?????, ???? ??, ?? ?????? ?? ??? ????? ????? ??????? ?????
function onOrder(var id)
{
	var order = getOrder(id);
	
	if (order["status"] == OS_MATCHED)
	{
		var price =	order["price"];
	
	}
}

function onTrade(var id) 
{
	var trade = getTrade(id);

	if (isForts > 0 )
	{
		fortsPositionSize = trade["currentpos"];
	}
}

function onNewCandle() 
{		
	var orders = getActiveOrderIDs();
	if(getHour(getCandleTime()) == 12 && getMinute(getCandleTime()) == 00 && orders.size() == 0 && open < line[0] )
	{
		updateOrders(OP_SELL);
	}
	if(getHour(getCandleTime()) == 13 && getMinute(getCandleTime()) == 00 && orders.size() == 0 && open > line[0])
	{
		updateOrders(OP_BUY);
	}		
}

// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
     signal::outputMultiple("Current Position :" + getSecBalanceWrapper());
  }
  if (key == chr2num("2") and isKeyPressed(KEY_LSHIFT)) 
  {
	 updateOrders();		
  }
  if (key == chr2num("3") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::output("Try to custom delete orders");
	CancelAllOrderCustom();
  }
	  if (key == chr2num("4") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::outputMultiple(getHour(getCandleTime()));
	signal::outputMultiple(getMinute(getCandleTime()));
  }
  
}


// BUTTONS FOR TESTING //

//Shift + 1
function onKeyDown(var key)
{
  if (key == chr2num("1") and isKeyPressed(KEY_LSHIFT)) 
  {
     signal::outputMultiple("Current Position :" + getSecBalanceWrapper());
  }
  if (key == chr2num("2") and isKeyPressed(KEY_LSHIFT)) 
  {
	 updateOrders();		
  }
  if (key == chr2num("3") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::output("Try to custom delete orders");
	CancelAllOrderCustom();
  }
	  if (key == chr2num("4") and isKeyPressed(KEY_LSHIFT)) 
  {
	signal::outputMultiple(getHour(getCandleTime()));
	signal::outputMultiple(getMinute(getCandleTime()));
  }
  
}
